<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.in28minutes.rest.webservices</groupId>
	<artifactId>01-hello-world-rest-api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<description>Demo project for Spring Boot</description>
	<name>hello-world-rest-api</name>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.7.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
		<dockerfile-maven-version>1.4.10</dockerfile-maven-version>
		<!-- Needed by io.fabric8 docker-maven-plugin -->
		<jar>${project.build.directory}/${project.build.finalName}.jar</jar>		 
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>hello-world-rest-api</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Maven Dependency Plugin -->
			<plugin>	
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack</id>
						<!-- execute this phase (package) with this configuration  ==> in cmd ==> mvn package  -->
						<phase>package</phase>
						<!-- the goal here it s unpack the dependencies and application 
							 all dependency in target/dependency [BOOT-INF , META-INF] 
							 DESIRED SITUATION 
							 	_______________
								    CLASSES       ==> target/dependency/BOOT-INF/classes/com/in28minutes/rest/webservices/restfulwebservices
								_______________
									DEPENDENCIES  ==> target/dependency/BOOT-INF/lib
								________________
								    JDK 
								  -->
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<version>${project.version}</version>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--  spotify Plugin ================= -->
			<!-- <plugin>
  				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>${dockerfile-maven-version}</version>
				<executions>
					<execution>
					<id>default</id>
					<goals>
						<goal>build</goal> -->
						<!-- <goal>push</goal> -->
					<!-- </goals>
					</execution>
				</executions>
				<configuration>
					<repository>in28minutes/${project.name}</repository>
					<tag>${project.version}</tag>
					<skipDockerInfo>true</skipDockerInfo> -->
					<!-- <buildArgs>
						<JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
					</buildArgs> -->
				<!-- </configuration>
			</plugin> -->

			<!-- Jib pluging ======================
			Containerize your Maven projet and OCI images , 
			OCI = Open Container Initiative - Objective of Creating Open Industry Standards around Container Formats and Runtime
			OCI it s like an interface and docker it s an implemenation of OCI
			NB with JIB we no need Dockerfile at all -->
			<!-- <plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>1.6.1</version>
				<configuration>
					<from>
						<image>openjdk:alpine</image>
					</from>
					<to>
						<image>in28min/${project.name}</image>
						<tags>
							<tag>${project.version}</tag>
							<tag>latest</tag>
						</tags>
					</to>
					<container>
						<creationTime>USE_CURRENT_TIMESTAMP</creationTime>
				 		<jvmFlags>
						 	<jvmFlag>-Xms512m</jvmFlag>
						</jvmFlags>
						<mainClass>com.in28minutes.rest.webservices.restfulwebservices.RestfulWebServicesApplication</mainClass>
						<ports>
							<port>8100</port>
						</ports>
					</container>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>dockerBuild</goal>
						</goals>
					</execution>
				</executions>
			</plugin> -->

			<!-- fabric8io plugin  ===========================  
			fabric8io/docker-maven-plugin
			- https://dmp.fabric8.io/
			- Remove Spotify Maven and JIB Plugins. Add the plugin shown below and configure property for jar file.
			Supports 
			- Dockerfile
			- Defining Dockerfile contents in POM XML. 

			#### Using Dockerfile -->
			<!-- To build the image - "mvn clean package" -->
			<!-- Successfully tagged webservices/01-hello-world-rest-api -->
			<!-- docker run -p 8080:8080 webservices/01-hello-world-rest-api -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.26.0</version>
				<executions>
					<execution>
						<id>docker-build</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- #### Using XML Configuration without Dockerfile -->
			<!-- To build the image - "mvn clean package" -->
			<!-- TAG - 01-hello-world-rest-api:latest -->
			<!-- docker run -p 8080:8080 01-hello-world-rest-api:latest -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.26.0</version>
				<extensions>true</extensions>
				<configuration>
					<verbose>true</verbose>
					<images>
						<image>
							<name>${project.artifactId}</name>
							<build>
							<from>java:8-jdk-alpine</from>
							<entryPoint>
								<exec>
									<args>java</args>
									<args>-jar</args>
									<args>/maven/${project.build.finalName}.jar</args>
								</exec>
							</entryPoint>
							<assembly>
								<descriptorRef>artifact</descriptorRef>
							</assembly>
							</build>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>docker-build</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			

		</plugins>

	</build>

	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
</project>
